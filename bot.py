import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler, CallbackQueryHandler
from sqlalchemy import create_engine, Column, Integer, String, DateTime, ForeignKey, Boolean, Text
from sqlalchemy.orm import sessionmaker, relationship, declarative_base
from sqlalchemy.sql import func
from datetime import datetime, timedelta, timezone
import os
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è - –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ –≤ —Ñ–∞–π–ª bot.log
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    filename='bot.log'
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö SQLite
Base = declarative_base()
engine = create_engine('sqlite:///requests.db')
Session = sessionmaker(bind=engine)

# –¢–æ–∫–µ–Ω –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '')  # API —Ç–æ–∫–µ–Ω —Ç–µ–ø–µ—Ä—å –±–µ—Ä–µ—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
EQUIPMENT, QUANTITY, DESCRIPTION, PRIORITY = range(4)

# –ö–ª–∞—Å—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True)
    telegram_id = Column(Integer, unique=True)
    username = Column(String)
    is_admin = Column(Boolean, default=False)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω
    created_at = Column(DateTime, default=func.now())
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    requests = relationship('Request', back_populates='user', foreign_keys='Request.user_id')
    # –ó–∞—è–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–Ω—è–ª
    completed_requests = relationship('Request', foreign_keys='Request.completed_by_id')
    # –ó–∞—è–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª/–æ—Ç–º–µ–Ω–∏–ª
    cancelled_requests = relationship('Request', foreign_keys='Request.cancelled_by_id')

# –ö–ª–∞—Å—Å –¥–ª—è –∑–∞—è–≤–æ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
class Request(Base):
    __tablename__ = 'requests'
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey('users.id'))
    equipment_name = Column(String)
    quantity = Column(Integer)
    description = Column(Text)
    priority = Column(String)
    status = Column(String, default='new')  # new, in_progress, completed, cancelled
    created_at = Column(DateTime, default=func.now())
    updated_at = Column(DateTime, default=func.now(), onupdate=func.now())
    completed_at = Column(DateTime, nullable=True)
    deleted_at = Column(DateTime, nullable=True)
    is_deleted = Column(Boolean, default=False)
    notes = Column(Text, nullable=True)  # –î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫
    estimated_completion = Column(DateTime, nullable=True)  # –û–∂–∏–¥–∞–µ–º–∞—è –¥–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    # –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
    completed_by_id = Column(Integer, ForeignKey('users.id'), nullable=True)  # –ö—Ç–æ –ø—Ä–∏–Ω—è–ª
    cancelled_by_id = Column(Integer, ForeignKey('users.id'), nullable=True)  # –ö—Ç–æ –æ—Ç–∫–ª–æ–Ω–∏–ª/–æ—Ç–º–µ–Ω–∏–ª
    # –û—Ç–Ω–æ—à–µ–Ω–∏—è
    user = relationship('User', back_populates='requests', foreign_keys=[user_id])
    completed_by = relationship('User', foreign_keys=[completed_by_id])
    cancelled_by = relationship('User', foreign_keys=[cancelled_by_id])

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
Base.metadata.create_all(engine)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
STATUSES = {
    'new': 'üÜï –ù–æ–≤—ã–µ',
    'in_progress': '‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ', 
    'completed': '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ',
    'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ'
}

PRIORITIES = {
    'high': 'üî¥ –í—ã—Å–æ–∫–∏–π',
    'medium': 'üü° –°—Ä–µ–¥–Ω–∏–π', 
    'low': 'üü¢ –ù–∏–∑–∫–∏–π'
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_main_menu_keyboard(is_admin):
    if is_admin:
        keyboard = [
            ["üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏"],
            ["‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏", "‚ùå –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏"],
            ["‚ùì –ü–æ–º–æ—â—å"]
        ]
    else:
        keyboard = [
            ["üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏"],
            ["‚ùì –ü–æ–º–æ—â—å"]
        ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        session = Session()
        
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
        user = session.query(User).filter(User.telegram_id == update.effective_user.id).first()
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
        if not user:
            user = User(
                telegram_id=update.effective_user.id,
                username=update.effective_user.username,
                is_admin=False
            )
            session.add(user)
            session.commit()
            await update.message.reply_text(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞—è–≤–∫–∞–º–∏.",
                reply_markup=get_main_menu_keyboard(False)
            )
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –µ–≥–æ
            role = "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if user.is_admin else "—Å–æ—Ç—Ä—É–¥–Ω–∏–∫"
            await update.message.reply_text(
                f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {role}! –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞—è–≤–∫–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ.",
                reply_markup=get_main_menu_keyboard(user.is_admin)
            )
            
    except Exception as e:
        # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–∏—à–µ–º –≤ –ª–æ–≥ –∏ —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    finally:
        session.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        session = Session()
        user = session.query(User).filter(User.telegram_id == update.effective_user.id).first()
        is_admin = user.is_admin if user else False
        
        if is_admin:
            help_text = (
                "‚ÑπÔ∏è *–°–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
                "‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ 'üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É'\n"
                "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –≤—Å–µ –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ 'üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏'\n"
                "‚Ä¢ –°–º–æ—Ç—Ä–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∏ –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é\n"
                "‚Ä¢ –î–ª—è –ø–æ–º–æ—â–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '‚ùì –ü–æ–º–æ—â—å'\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start ‚Äî –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞\n/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ"
            )
        else:
            help_text = (
                "‚ÑπÔ∏è *–°–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n"
                "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ 'üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏'\n"
                "‚Ä¢ –ü—Ä–∏–Ω–∏–º–∞–π—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω—è–π—Ç–µ –∑–∞—è–≤–∫–∏\n"
                "‚Ä¢ –°–º–æ—Ç—Ä–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∏ –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é\n"
                "‚Ä¢ –î–ª—è –ø–æ–º–æ—â–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '‚ùì –ü–æ–º–æ—â—å'\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start ‚Äî –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞\n/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ"
            )
        
        await update.message.reply_text(
            help_text,
            parse_mode='Markdown',
            reply_markup=get_main_menu_keyboard(is_admin)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ help: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø—Ä–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        session.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
async def create_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        session = Session()
        user = session.query(User).filter(User.telegram_id == update.effective_user.id).first()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–¥–º–∏–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if not user or not user.is_admin:
            await update.message.reply_text(
                "–î–æ—Å—Ç—É–ø –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∑–∞—è–≤–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=get_main_menu_keyboard(False)
            )
            return ConversationHandler.END

        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        context.user_data.clear()
        
        # –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:"
        )
        return EQUIPMENT
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ create_request: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END
    finally:
        session.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
async def equipment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–º–µ–Ω–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if update.message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            return await cancel(update, context)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
        context.user_data['equipment'] = update.message.text
        
        # –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è):"
        )
        return QUANTITY
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ equipment: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
async def quantity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if update.message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            return await cancel(update, context)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
        try:
            quantity = int(update.message.text)
            if quantity <= 0:
                await update.message.reply_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è):"
                )
                return QUANTITY
            context.user_data['quantity'] = quantity
            await update.message.reply_text(
                "–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—É—Ç—å –∑–∞—è–≤–∫–∏:"
            )
            return DESCRIPTION
        except ValueError:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5, 10, 100):"
            )
            return QUANTITY
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ quantity: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è
async def description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if update.message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            return await cancel(update, context)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        context.user_data['description'] = update.message.text
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        keyboard = [
            ["üî¥ –í—ã—Å–æ–∫–∏–π", "üü° –°—Ä–µ–¥–Ω–∏–π"],
            ["üü¢ –ù–∏–∑–∫–∏–π", "‚ùå –û—Ç–º–µ–Ω–∞"]
        ]
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞—è–≤–∫–∏: üî¥ –í—ã—Å–æ–∫–∏–π, üü° –°—Ä–µ–¥–Ω–∏–π –∏–ª–∏ üü¢ –ù–∏–∑–∫–∏–π.",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return PRIORITY
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ description: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
async def priority(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if update.message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            return await cancel(update, context)

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –≤ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        priority_map = {
            "üî¥ –í—ã—Å–æ–∫–∏–π": "high",
            "üü° –°—Ä–µ–¥–Ω–∏–π": "medium",
            "üü¢ –ù–∏–∑–∫–∏–π": "low"
        }

        if update.message.text not in priority_map:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
            )
            return PRIORITY

        context.user_data['priority'] = priority_map[update.message.text]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        session = Session()
        try:
            user = session.query(User).filter(User.telegram_id == update.effective_user.id).first()
            if not user:
                await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
                return

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É
            request = Request(
                user_id=user.id,
                equipment_name=context.user_data['equipment'],
                quantity=context.user_data['quantity'],
                description=context.user_data['description'],
                priority=context.user_data['priority'],
                status='new'
            )
            session.add(request)
            session.commit()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞—è–≤–∫–∏ –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏
            request_id = request.id
            equipment_name = request.equipment_name
            quantity = request.quantity
            priority_value = request.priority

            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            context.user_data.clear()

            await update.message.reply_text(
                "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –ø–æ—è–≤–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.",
                reply_markup=get_main_menu_keyboard(user.is_admin)
            )
            return ConversationHandler.END
            
        finally:
            session.close()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ priority: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = None
    try:
        session = Session()
        user = session.query(User).filter(User.telegram_id == update.effective_user.id).first()
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        context.user_data.clear()

        await update.message.reply_text(
            "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
            reply_markup=get_main_menu_keyboard(user.is_admin if user else False)
        )
        return ConversationHandler.END
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cancel: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return ConversationHandler.END
    finally:
        session.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ (–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∏ –Ω–µ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö)
async def list_active_requests(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = None
    try:
        session = Session()
        user = session.query(User).filter(User.telegram_id == update.effective_user.id).first()
        
        if not user:
            await update.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.",
                reply_markup=get_main_menu_keyboard(user.is_admin)
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ (–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ, –Ω–µ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ, –Ω–µ —É–¥–∞–ª–µ–Ω–Ω—ã–µ)
        query = session.query(Request).filter(
            Request.is_deleted == False,
            Request.status.in_(['new', 'in_progress'])
        )
        requests = query.order_by(Request.created_at.desc()).all()

        if not requests:
            await update.message.reply_text(
                "–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ï—Å–ª–∏ –≤—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –≤—Å–µ –∑–∞—è–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã. –ï—Å–ª–∏ –≤—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫, —É –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.",
                reply_markup=get_main_menu_keyboard(user.is_admin)
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∑–∞—è–≤–∫—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –∫–Ω–æ–ø–∫–∞–º–∏
        for request in requests:
            message = format_request_details(request)
            keyboard = []
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ (–Ω–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–≤–æ–∏—Ö –∑–∞—è–≤–æ–∫)
            if not user.is_admin:
                if request.status == 'new':
                    keyboard.append([
                        InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"complete_{request.id}"),
                        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"cancel_{request.id}")
                    ])
                elif request.status == 'in_progress':
                    keyboard.append([
                        InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"complete_{request.id}")
                    ])
            if keyboard:
                reply_markup = InlineKeyboardMarkup(keyboard)
            else:
                reply_markup = None
            await update.message.reply_text(
                message,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ list_active_requests: {str(e)}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard(user.is_admin if user else False)
        )
    finally:
        session.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
async def show_completed_requests(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        session = Session()
        user = session.query(User).filter(User.telegram_id == update.effective_user.id).first()
        
        if not user or not user.is_admin:
            await update.message.reply_text(
                "–î–æ—Å—Ç—É–ø –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –∑–∞—è–≤–∫–∞–º —Ä–∞–∑—Ä–µ—à—ë–Ω —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.",
                reply_markup=get_main_menu_keyboard(False)
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        thirty_days_ago = datetime.now(timezone.utc) - timedelta(days=30)
        requests = session.query(Request).filter(
            Request.status == 'completed',
            Request.is_deleted == False,
            Request.completed_at >= thirty_days_ago
        ).order_by(Request.completed_at.desc()).all()

        if not requests:
            await update.message.reply_text(
                "–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                reply_markup=get_main_menu_keyboard(True)
            )
            return

        for req in requests:
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –¥–∞—Ç—ã –∏–º–µ—é—Ç timezone
            if req.completed_at and req.completed_at.tzinfo is None:
                req.completed_at = req.completed_at.replace(tzinfo=timezone.utc)
            
            days_left = 30 - (datetime.now(timezone.utc) - req.completed_at).days if req.completed_at else 0
            priority_emoji = {
                'high': 'üî¥',
                'medium': 'üü°',
                'low': 'üü¢'
            }.get(req.priority, '‚ö™Ô∏è')

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–º, –∫—Ç–æ –ø—Ä–∏–Ω—è–ª –∑–∞—è–≤–∫—É
            completed_by_info = ""
            if req.completed_by:
                completed_by_info = f"üë§ –ü—Ä–∏–Ω—è–ª: @{req.completed_by.username}" if req.completed_by.username else f"üë§ –ü—Ä–∏–Ω—è–ª: ID {req.completed_by.telegram_id}"
            else:
                completed_by_info = "üë§ –ü—Ä–∏–Ω—è–ª: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

            message = (
                f"‚úÖ *–í—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞ #{req.id}*\n\n"
                f"üì¶ –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: {req.equipment_name}\n"
                f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {req.quantity}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {req.description}\n"
                f"{priority_emoji} –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {req.priority}\n"
                f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {req.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞: {req.completed_at.strftime('%d.%m.%Y %H:%M') if req.completed_at else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"{completed_by_info}\n"
                f"‚è≥ –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑: {days_left} –¥–Ω–µ–π\n"
            )
            keyboard = [
                [
                    InlineKeyboardButton("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"restore_completed_{req.id}"),
                    InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_completed_{req.id}")
                ]
            ]
            await update.message.reply_text(
                message,
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup(keyboard)
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_completed_requests: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        session.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
async def show_cancelled_requests(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        session = Session()
        user = session.query(User).filter(User.telegram_id == update.effective_user.id).first()
        
        if not user or not user.is_admin:
            await update.message.reply_text(
                "–î–æ—Å—Ç—É–ø –∫ –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã–º –∑–∞—è–≤–∫–∞–º —Ä–∞–∑—Ä–µ—à—ë–Ω —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.",
                reply_markup=get_main_menu_keyboard(False)
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        thirty_days_ago = datetime.now(timezone.utc) - timedelta(days=30)
        requests = session.query(Request).filter(
            Request.status == 'cancelled',
            Request.updated_at >= thirty_days_ago
        ).order_by(Request.updated_at.desc()).all()

        if not requests:
            await update.message.reply_text(
                "–û—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                reply_markup=get_main_menu_keyboard(True)
            )
            return

        for req in requests:
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –¥–∞—Ç—ã –∏–º–µ—é—Ç timezone
            if req.updated_at and req.updated_at.tzinfo is None:
                req.updated_at = req.updated_at.replace(tzinfo=timezone.utc)
            
            days_left = 30 - (datetime.now(timezone.utc) - req.updated_at).days if req.updated_at else 0
            priority_emoji = {
                'high': 'üî¥',
                'medium': 'üü°',
                'low': 'üü¢'
            }.get(req.priority, '‚ö™Ô∏è')

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–º, –∫—Ç–æ –æ—Ç–∫–ª–æ–Ω–∏–ª/–æ—Ç–º–µ–Ω–∏–ª –∑–∞—è–≤–∫—É
            cancelled_by_info = ""
            if req.cancelled_by:
                cancelled_by_info = f"üë§ –û—Ç–∫–ª–æ–Ω–∏–ª/–æ—Ç–º–µ–Ω–∏–ª: @{req.cancelled_by.username}" if req.cancelled_by.username else f"üë§ –û—Ç–∫–ª–æ–Ω–∏–ª/–æ—Ç–º–µ–Ω–∏–ª: ID {req.cancelled_by.telegram_id}"
            else:
                cancelled_by_info = "üë§ –û—Ç–∫–ª–æ–Ω–∏–ª/–æ—Ç–º–µ–Ω–∏–ª: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

            message = (
                f"‚ùå *–û—Ç–º–µ–Ω–µ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞ #{req.id}*\n\n"
                f"üì¶ –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: {req.equipment_name}\n"
                f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {req.quantity}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {req.description}\n"
                f"{priority_emoji} –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {req.priority}\n"
                f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {req.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                f"‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞: {req.updated_at.strftime('%d.%m.%Y %H:%M')}\n"
                f"{cancelled_by_info}\n"
                f"‚è≥ –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑: {days_left} –¥–Ω–µ–π\n"
            )
            keyboard = [
                [
                    InlineKeyboardButton("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"restore_{req.id}"),
                    InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_now_{req.id}")
                ]
            ]
            await update.message.reply_text(
                message,
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup(keyboard)
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_cancelled_requests: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        session.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
async def handle_menu_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if update.message.text == "üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É":
            return await create_request(update, context)
        elif update.message.text == "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏":
            return await list_active_requests(update, context)
        elif update.message.text == "üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏":
            return await list_active_requests(update, context)
        elif update.message.text == "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏":
            return await show_completed_requests(update, context)
        elif update.message.text == "‚ùå –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏":
            return await show_cancelled_requests(update, context)
        elif update.message.text == "‚ùì –ü–æ–º–æ—â—å":
            return await help_command(update, context)
        else:
            await update.message.reply_text(
                "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∏–ª–∏ –∫–Ω–æ–ø–∫—É '‚ùì –ü–æ–º–æ—â—å'."
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_menu_click: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è inline –∫–Ω–æ–ø–æ–∫
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        await query.answer()

        session = Session()
        try:
            user = session.query(User).filter(User.telegram_id == update.effective_user.id).first()
            if not user:
                await query.edit_message_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
                return

            # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data
            parts = query.data.split('_')
            action = parts[0]
            
            if action == 'complete':
                request_id = int(parts[1])
                request = session.query(Request).filter(Request.id == request_id).first()
                
                if not request:
                    await query.edit_message_text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ.")
                    return

                # –û—Ç–º–µ—á–∞–µ–º –∑–∞—è–≤–∫—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
                request.status = 'completed'
                request.completed_at = datetime.now(timezone.utc)
                request.completed_by_id = user.id
                session.commit()

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–º, –∫—Ç–æ –ø—Ä–∏–Ω—è–ª
                action_info = f"üë§ –ü—Ä–∏–Ω—è–ª: @{user.username}" if user.username else f"üë§ –ü—Ä–∏–Ω—è–ª: ID {user.telegram_id}"
                
                await query.edit_message_text(
                    f"‚úÖ *–ó–∞—è–≤–∫–∞ #{request.id} –ø—Ä–∏–Ω—è—Ç–∞!*\n\n"
                    f"üì¶ –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: {request.equipment_name}\n"
                    f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {request.quantity}\n"
                    f"‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '–ü—Ä–∏–Ω—è—Ç–æ'\n"
                    f"üìÖ –î–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∏—è: {datetime.now(timezone.utc).strftime('%d.%m.%Y %H:%M')}\n"
                    f"{action_info}",
                    parse_mode='Markdown'
                )
                return

            elif action == 'reject':
                if not user.is_admin:
                    await query.edit_message_text("üîí –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω\n\n–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–æ–∫.")
                    return
                    
                request_id = int(parts[1])
                request = session.query(Request).filter(Request.id == request_id).first()
                
                if not request:
                    await query.edit_message_text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ.")
                    return

                # –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞—è–≤–∫—É (–ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å—Ç–∞—Ç—É—Å –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö)
                request.status = 'cancelled'
                request.cancelled_by_id = user.id
                session.commit()

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–º, –∫—Ç–æ –æ—Ç–∫–ª–æ–Ω–∏–ª
                action_info = f"üë§ –û—Ç–∫–ª–æ–Ω–∏–ª: @{user.username}" if user.username else f"üë§ –û—Ç–∫–ª–æ–Ω–∏–ª: ID {user.telegram_id}"

                await query.edit_message_text(
                    f"‚ùå *–ó–∞—è–≤–∫–∞ #{request.id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞*\n\n"
                    f"üì¶ –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: {request.equipment_name}\n"
                    f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {request.quantity}\n"
                    f"‚ùå –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ'\n"
                    f"üìÖ –î–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {datetime.now(timezone.utc).strftime('%d.%m.%Y %H:%M')}\n"
                    f"{action_info}",
                    parse_mode='Markdown'
                )
                return

            elif action == 'cancel':
                request_id = int(parts[1])
                request = session.query(Request).filter(Request.id == request_id).first()
                
                if not request:
                    await query.edit_message_text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ.")
                    return

                request.status = 'cancelled'
                request.cancelled_by_id = user.id
                session.commit()

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–º, –∫—Ç–æ –æ—Ç–º–µ–Ω–∏–ª
                action_info = f"üë§ –û—Ç–º–µ–Ω–∏–ª: @{user.username}" if user.username else f"üë§ –û—Ç–º–µ–Ω–∏–ª: ID {user.telegram_id}"

                await query.edit_message_text(
                    f"‚ùå *–ó–∞—è–≤–∫–∞ #{request.id} –æ—Ç–º–µ–Ω–µ–Ω–∞*\n\n"
                    f"üì¶ –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: {request.equipment_name}\n"
                    f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {request.quantity}\n"
                    f"‚ùå –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '–û—Ç–º–µ–Ω–µ–Ω–æ'\n"
                    f"üìÖ –î–∞—Ç–∞ –æ—Ç–º–µ–Ω—ã: {datetime.now(timezone.utc).strftime('%d.%m.%Y %H:%M')}\n"
                    f"{action_info}",
                    parse_mode='Markdown'
                )
                return

            elif action == 'restore' and len(parts) > 1 and parts[1] == 'completed':
                if not user.is_admin:
                    await query.edit_message_text("üîí –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω\n\n–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
                    return
                    
                request_id = int(parts[2])
                request = session.query(Request).filter(Request.id == request_id).first()
                
                if not request:
                    await query.edit_message_text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ.")
                    return

                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É –≤ —Å—Ç–∞—Ç—É—Å "–Ω–æ–≤—ã–µ"
                request.status = 'new'
                request.completed_at = None
                request.completed_by_id = None
                session.commit()

                await query.edit_message_text(
                    f"üîÑ *–ó–∞—è–≤–∫–∞ #{request.id} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞*\n\n"
                    f"üì¶ –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: {request.equipment_name}\n"
                    f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {request.quantity}\n"
                    f"üÜï –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '–ù–æ–≤—ã–µ'\n"
                    f"üìÖ –î–∞—Ç–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {datetime.now(timezone.utc).strftime('%d.%m.%Y %H:%M')}",
                    parse_mode='Markdown'
                )
                return

            elif action == 'restore':
                if not user.is_admin:
                    await query.edit_message_text("üîí –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω\n\n–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
                    return
                    
                request_id = int(parts[1])
                request = session.query(Request).filter(Request.id == request_id).first()
                
                if not request:
                    await query.edit_message_text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ.")
                    return

                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞—è–≤–∫—É –∏–∑ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö
                request.status = 'new'
                request.cancelled_by_id = None
                session.commit()

                await query.edit_message_text(
                    f"üîÑ *–ó–∞—è–≤–∫–∞ #{request.id} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞*\n\n"
                    f"üì¶ –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: {request.equipment_name}\n"
                    f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {request.quantity}\n"
                    f"üÜï –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '–ù–æ–≤—ã–µ'\n"
                    f"üìÖ –î–∞—Ç–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {datetime.now(timezone.utc).strftime('%d.%m.%Y %H:%M')}",
                    parse_mode='Markdown'
                )
                return

            elif action == 'delete' and len(parts) > 1 and parts[1] == 'completed':
                if not user.is_admin:
                    await query.edit_message_text("üîí –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω\n\n–£–¥–∞–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
                    return
                    
                request_id = int(parts[2])
                request = session.query(Request).filter(Request.id == request_id).first()
                
                if not request:
                    await query.edit_message_text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ.")
                    return

                # –£–¥–∞–ª—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É –Ω–∞–≤—Å–µ–≥–¥–∞
                equipment_name = request.equipment_name
                session.delete(request)
                session.commit()

                await query.edit_message_text(
                    f"üóë *–í—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞ #{request_id} —É–¥–∞–ª–µ–Ω–∞*\n\n"
                    f"üì¶ –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: {equipment_name}\n"
                    f"üóë –ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –Ω–∞–≤—Å–µ–≥–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã\n"
                    f"üìÖ –î–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∏—è: {datetime.now(timezone.utc).strftime('%d.%m.%Y %H:%M')}",
                    parse_mode='Markdown'
                )
                return

            elif action == 'delete' and len(parts) > 1 and parts[1] == 'now':
                if not user.is_admin:
                    await query.edit_message_text("üîí –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω\n\n–£–¥–∞–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
                    return
                    
                request_id = int(parts[2])
                request = session.query(Request).filter(Request.id == request_id).first()
                
                if not request:
                    await query.edit_message_text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ.")
                    return

                # –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É –Ω–∞–≤—Å–µ–≥–¥–∞
                equipment_name = request.equipment_name
                session.delete(request)
                session.commit()

                await query.edit_message_text(
                    f"ÔøΩÔøΩ *–ó–∞—è–≤–∫–∞ #{request_id} —É–¥–∞–ª–µ–Ω–∞*\n\n"
                    f"üì¶ –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: {equipment_name}\n"
                    f"üóë –ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –Ω–∞–≤—Å–µ–≥–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã\n"
                    f"üìÖ –î–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∏—è: {datetime.now(timezone.utc).strftime('%d.%m.%Y %H:%M')}",
                    parse_mode='Markdown'
                )
                return

            else:
                await query.edit_message_text("üòî –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return

        finally:
            session.close()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_callback: {e}")
        await query.edit_message_text("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
def format_datetime(dt):
    if dt:
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –¥–∞—Ç–∞ –∏–º–µ–µ—Ç timezone
        if dt.tzinfo is None:
            dt = dt.replace(tzinfo=timezone.utc)
        return dt.strftime("%d.%m.%Y %H:%M")
    return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

def get_status_emoji(status):
    status_emojis = {
        'new': 'üÜï',
        'in_progress': '‚è≥',
        'completed': '‚úÖ',
        'cancelled': '‚ùå'
    }
    return status_emojis.get(status, '‚ùì')

def get_priority_emoji(priority):
    priority_emojis = {
        'high': 'üî¥',
        'medium': 'üü°',
        'low': 'üü¢'
    }
    return priority_emojis.get(priority, '‚ö™Ô∏è')

def format_request_details(request):
    # –ü–æ–ª—É—á–∞–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    status_emoji = get_status_emoji(request.status)
    priority_emoji = get_priority_emoji(request.priority)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    status_display = {
        'new': '–ù–æ–≤—ã–µ',
        'in_progress': '–í –ø—Ä–æ—Ü–µ—Å—Å–µ',
        'completed': '–í—ã–ø–æ–ª–Ω–µ–Ω–æ',
        'cancelled': '–û—Ç–º–µ–Ω–µ–Ω–æ'
    }.get(request.status, request.status)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    priority_display = {
        'high': '–í—ã—Å–æ–∫–∏–π',
        'medium': '–°—Ä–µ–¥–Ω–∏–π',
        'low': '–ù–∏–∑–∫–∏–π'
    }.get(request.priority, request.priority)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–º, –∫—Ç–æ –ø—Ä–∏–Ω—è–ª –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞—è–≤–∫—É
    action_info = ""
    if request.status == 'completed' and request.completed_by:
        action_info = f"\nüë§ –ü—Ä–∏–Ω—è–ª: @{request.completed_by.username}" if request.completed_by.username else f"\nüë§ –ü—Ä–∏–Ω—è–ª: ID {request.completed_by.telegram_id}"
    elif request.status == 'cancelled' and request.cancelled_by:
        action_info = f"\nüë§ –û—Ç–∫–ª–æ–Ω–∏–ª/–æ—Ç–º–µ–Ω–∏–ª: @{request.cancelled_by.username}" if request.cancelled_by.username else f"\nüë§ –û—Ç–∫–ª–æ–Ω–∏–ª/–æ—Ç–º–µ–Ω–∏–ª: ID {request.cancelled_by.telegram_id}"
    
    return (
        f"üìã *–ó–∞—è–≤–∫–∞ #{request.id}*\n\n"
        f"üì¶ *–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:* {request.equipment_name}\n"
        f"üî¢ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* {request.quantity}\n"
        f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {request.description}\n"
        f"‚ö°Ô∏è *–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:* {priority_emoji} {priority_display}\n"
        f"üìä *–°—Ç–∞—Ç—É—Å:* {status_emoji} {status_display}\n\n"
        f"üïí *–°–æ–∑–¥–∞–Ω–æ:* {format_datetime(request.created_at)}\n"
        f"üìÖ *–û–±–Ω–æ–≤–ª–µ–Ω–æ:* {format_datetime(request.updated_at)}\n"
        f"‚úÖ *–í—ã–ø–æ–ª–Ω–µ–Ω–æ:* {format_datetime(request.completed_at)}\n"
        f"üìå *–ó–∞–º–µ—Ç–∫–∏:* {request.notes if request.notes else '–ù–µ—Ç –∑–∞–º–µ—Ç–æ–∫'}{action_info}"
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
def cleanup_old_requests():
    try:
        session = Session()
        thirty_days_ago = datetime.now(timezone.utc) - timedelta(days=30)
        # –ù–∞—Ö–æ–¥–∏–º –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π
        old_cancelled_requests = session.query(Request).filter(
            Request.status == 'cancelled',
            Request.updated_at < thirty_days_ago
        ).all()
        # –ù–∞—Ö–æ–¥–∏–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π
        old_completed_requests = session.query(Request).filter(
            Request.status == 'completed',
            Request.completed_at < thirty_days_ago
        ).all()
        for request in old_cancelled_requests:
            session.delete(request)
        for request in old_completed_requests:
            session.delete(request)
        session.commit()
        session.close()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –∑–∞—è–≤–æ–∫: {e}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        Base.metadata.create_all(engine)
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        cleanup_old_requests()
        
        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
        application = Application.builder().token(TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("cancel", cancel))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
        conv_handler = ConversationHandler(
            entry_points=[MessageHandler(filters.Regex("^üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É$"), create_request)],
            states={
                EQUIPMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, equipment)],
                QUANTITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, quantity)],
                DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, description)],
                PRIORITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, priority)],
            },
            fallbacks=[CommandHandler("cancel", cancel)],
        )
        application.add_handler(conv_handler)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é
        application.add_handler(MessageHandler(filters.Regex("^(üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏|üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏)$"), list_active_requests))
        application.add_handler(MessageHandler(filters.Regex("^‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏$"), show_completed_requests))
        application.add_handler(MessageHandler(filters.Regex("^‚ùå –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏$"), show_cancelled_requests))
        application.add_handler(MessageHandler(filters.Regex("^‚ùì –ü–æ–º–æ—â—å$"), help_command))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
        application.add_handler(CallbackQueryHandler(handle_callback))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        print("ü§ñ –ë–æ—Ç —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏ –∑–∞–ø—É—â–µ–Ω!")
        print("üìä –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
        print("üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        application.run_polling(allowed_updates=Update.ALL_TYPES)
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main: {e}")
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1) 